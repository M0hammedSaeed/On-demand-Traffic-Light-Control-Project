
On_demand_Traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002714  000027a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800168  00800168  000028b0  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000132f  00000000  00000000  00005304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006633  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00006793  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00006949  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00008856  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00009928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a958  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000aad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000adbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_1>
       8:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__vector_2>
       c:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_3>
      10:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_4>
      14:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_7>
      20:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__vector_8>
      24:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_9>
      28:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_10>
      2c:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 37       	cpi	r26, 0x7D	; 125
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e1       	ldi	r30, 0x14	; 20
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 44 13 	call	0x2688	; 0x2688 <main>
      8a:	0c 94 88 13 	jmp	0x2710	; 0x2710 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <__vector_11>:

/*
 * [Description]: The ISR's specific For TIMER0
 */
ISR(TIMER0_OVF_vect)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
     d98:	80 91 68 01 	lds	r24, 0x0168
     d9c:	90 91 69 01 	lds	r25, 0x0169
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	29 f0       	breq	.+10     	; 0xdae <__vector_11+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
		(*g_Ptr_To_Fun_TIMER_0)();
     da4:	e0 91 68 01 	lds	r30, 0x0168
     da8:	f0 91 69 01 	lds	r31, 0x0169
     dac:	09 95       	icall
	}
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
     dfe:	80 91 68 01 	lds	r24, 0x0168
     e02:	90 91 69 01 	lds	r25, 0x0169
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <__vector_10+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_0)();
     e0a:	e0 91 68 01 	lds	r30, 0x0168
     e0e:	f0 91 69 01 	lds	r31, 0x0169
     e12:	09 95       	icall
	}
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_9>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER1_OVF_vect)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     e64:	80 91 6a 01 	lds	r24, 0x016A
     e68:	90 91 6b 01 	lds	r25, 0x016B
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	29 f0       	breq	.+10     	; 0xe7a <__vector_9+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     e70:	e0 91 6a 01 	lds	r30, 0x016A
     e74:	f0 91 6b 01 	lds	r31, 0x016B
     e78:	09 95       	icall
	}
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 93       	push	r18
     eac:	3f 93       	push	r19
     eae:	4f 93       	push	r20
     eb0:	5f 93       	push	r21
     eb2:	6f 93       	push	r22
     eb4:	7f 93       	push	r23
     eb6:	8f 93       	push	r24
     eb8:	9f 93       	push	r25
     eba:	af 93       	push	r26
     ebc:	bf 93       	push	r27
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     eca:	80 91 6a 01 	lds	r24, 0x016A
     ece:	90 91 6b 01 	lds	r25, 0x016B
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	29 f0       	breq	.+10     	; 0xee0 <__vector_7+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     ed6:	e0 91 6a 01 	lds	r30, 0x016A
     eda:	f0 91 6b 01 	lds	r31, 0x016B
     ede:	09 95       	icall
	}
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	1f 90       	pop	r1
     f04:	18 95       	reti

00000f06 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     f30:	80 91 6a 01 	lds	r24, 0x016A
     f34:	90 91 6b 01 	lds	r25, 0x016B
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	29 f0       	breq	.+10     	; 0xf46 <__vector_8+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     f3c:	e0 91 6a 01 	lds	r30, 0x016A
     f40:	f0 91 6b 01 	lds	r31, 0x016B
     f44:	09 95       	icall
	}
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_5>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER2_OVF_vect)
{
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
     f96:	80 91 6c 01 	lds	r24, 0x016C
     f9a:	90 91 6d 01 	lds	r25, 0x016D
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	29 f0       	breq	.+10     	; 0xfac <__vector_5+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
     fa2:	e0 91 6c 01 	lds	r30, 0x016C
     fa6:	f0 91 6d 01 	lds	r31, 0x016D
     faa:	09 95       	icall
	}
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
     ffc:	80 91 6c 01 	lds	r24, 0x016C
    1000:	90 91 6d 01 	lds	r25, 0x016D
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	29 f0       	breq	.+10     	; 0x1012 <__vector_4+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_0)();
    1008:	e0 91 68 01 	lds	r30, 0x0168
    100c:	f0 91 69 01 	lds	r31, 0x0169
    1010:	09 95       	icall
	}
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <TIMER_Init>:
 *                  The same time from Configuration of timer .
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_Init(void)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
#endif
#endif

#if (TIMER0_MODE_SELECTOR == TIMER0_MODE_OVF_MSK) || (TIMER0_MODE_SELECTOR == TIMER0_MODE_CTC_MSK)
#if TIMER0_MODE_SELECTOR == TIMER0_MODE_OVF_MSK
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
    1040:	a3 e5       	ldi	r26, 0x53	; 83
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e3 e5       	ldi	r30, 0x53	; 83
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	87 7b       	andi	r24, 0xB7	; 183
    104c:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_MODE_OVF_MSK;
    104e:	a3 e5       	ldi	r26, 0x53	; 83
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e3 e5       	ldi	r30, 0x53	; 83
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	8c 93       	st	X, r24
	case TIMER0_CLK_WITH_256_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER0_CLK_WITH_1024_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
    105c:	a3 e5       	ldi	r26, 0x53	; 83
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e3 e5       	ldi	r30, 0x53	; 83
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	88 7f       	andi	r24, 0xF8	; 248
    1068:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_CLK_WITH_1024_PRESCALER_MSK;
    106a:	a3 e5       	ldi	r26, 0x53	; 83
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e3 e5       	ldi	r30, 0x53	; 83
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	85 60       	ori	r24, 0x05	; 5
    1076:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}

	/* Initial value for Timer/Counter0 */
	TCNT0_REG = TIMER0_INITIAL_VALUE;
    1078:	e2 e5       	ldi	r30, 0x52	; 82
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter0 */
	OCR0_REG = TIMER0_COMPARE_VALUE;
    107e:	ec e5       	ldi	r30, 0x5C	; 92
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	10 82       	st	Z, r1
#endif
#endif

#if (TIMER2_MODE_SELECTOR == TIMER2_MODE_OVF_MSK) || (TIMER2_MODE_SELECTOR == TIMER2_MODE_CTC_MSK)
#if TIMER2_MODE_SELECTOR == TIMER2_MODE_OVF_MSK
	TCCR2_REG &= TIMER2_OC2_clr_MSK;
    1084:	a5 e4       	ldi	r26, 0x45	; 69
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e4       	ldi	r30, 0x45	; 69
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8f 7c       	andi	r24, 0xCF	; 207
    1090:	8c 93       	st	X, r24
	TCCR2_REG |= TIMER2_MODE_OVF_MSK;
    1092:	a5 e4       	ldi	r26, 0x45	; 69
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e4       	ldi	r30, 0x45	; 69
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 68       	ori	r24, 0x80	; 128
    109e:	8c 93       	st	X, r24
	case TIMER2_CLK_WITH_256_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
		TCCR2_REG |= TIMER2_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER2_CLK_WITH_1024_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
    10a0:	a5 e4       	ldi	r26, 0x45	; 69
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e4       	ldi	r30, 0x45	; 69
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 7f       	andi	r24, 0xF8	; 248
    10ac:	8c 93       	st	X, r24
		TCCR2_REG |= TIMER2_CLK_WITH_1024_PRESCALER_MSK;
    10ae:	a5 e4       	ldi	r26, 0x45	; 69
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e4       	ldi	r30, 0x45	; 69
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	87 60       	ori	r24, 0x07	; 7
    10ba:	8c 93       	st	X, r24
		break;
	}

	/* Initial value for Timer/Counter2 */
	TCNT2_REG = TIMER2_INITIAL_VALUE;
    10bc:	e4 e4       	ldi	r30, 0x44	; 68
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter2 */
	OCR2_REG = TIMER2_COMPARE_VALUE;
    10c2:	e3 e4       	ldi	r30, 0x43	; 67
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	10 82       	st	Z, r1
#endif

	/* To enable TIMER's Interrupt */
	TIMER_EnableInterrupt();
    10c8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <TIMER_EnableInterrupt>
}
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <TIMER_EnableInterrupt>:
 *                  Depend on Timer That you made it Enable.
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_EnableInterrupt(void)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
#if TIMER0 == ENABLE

#if TIMER0_OVF_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_TOIE0);
    10da:	a9 e5       	ldi	r26, 0x59	; 89
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e9 e5       	ldi	r30, 0x59	; 89
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	8c 93       	st	X, r24
#endif

#if TIMER2 == ENABLE

#if TIMER2_OVF_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_TOIE2);
    10e8:	a9 e5       	ldi	r26, 0x59	; 89
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e9 e5       	ldi	r30, 0x59	; 89
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	8c 93       	st	X, r24
#elif TIMER2_COMP_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE2);
#endif
#endif
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <TIMER0_SetCallBack>:
 *                  Every set callback function follow specific Timer.
 * [Args]  : Pointer To Function take void and return void
 * [RUTURN]: Void
 */
void TIMER0_SetCallBack(void (*Ptr_To_fun)(void))
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <TIMER0_SetCallBack+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_0 = (volatile void *)Ptr_To_fun;
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	90 93 69 01 	sts	0x0169, r25
    1112:	80 93 68 01 	sts	0x0168, r24
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void (*Ptr_To_fun)(void))
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <TIMER1_SetCallBack+0x6>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_1 = (volatile void *)Ptr_To_fun;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	90 93 6b 01 	sts	0x016B, r25
    1136:	80 93 6a 01 	sts	0x016A, r24
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <TIMER2_SetCallBack>:

void TIMER2_SetCallBack(void (*Ptr_To_fun)(void))
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <TIMER2_SetCallBack+0x6>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_2 = (volatile void *)Ptr_To_fun;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	90 93 6d 01 	sts	0x016D, r25
    115a:	80 93 6c 01 	sts	0x016C, r24
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <TIMER_DeInit>:
 * [DISCRIPTION]  : This function is responsible to De-initialization all Timers
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_DeInit(void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	/* TIMER0 De-init */
	TCCR0_REG = 0;
    1170:	e3 e5       	ldi	r30, 0x53	; 83
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	10 82       	st	Z, r1
	/* TIMER2 De-init */
	TCCR2_REG = 0;
    1176:	e5 e4       	ldi	r30, 0x45	; 69
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	10 82       	st	Z, r1

	/* TIMER1 De-init */
	TCCR1A_REG = 0;
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1182:	ee e4       	ldi	r30, 0x4E	; 78
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	10 82       	st	Z, r1
}
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <Timer0_PWM_DutyCycle>:
 *					 5. Setup the direction for OC0 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer0_PWM_DutyCycle(uint8 duty_cycle)
{
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	0f 92       	push	r0
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter0 */
	TCNT0_REG = TIMER0_INITIAL_VALUE;
    119e:	e2 e5       	ldi	r30, 0x52	; 82
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	10 82       	st	Z, r1

	/* Set Compare value */
	OCR0_REG = ((float32)duty_cycle / 100) * 255;
    11a4:	0c e5       	ldi	r16, 0x5C	; 92
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 e0       	ldi	r26, 0x00	; 0
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	48 ec       	ldi	r20, 0xC8	; 200
    11c8:	52 e4       	ldi	r21, 0x42	; 66
    11ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	53 e4       	ldi	r21, 0x43	; 67
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	f8 01       	movw	r30, r16
    11f4:	80 83       	st	Z, r24
	case TIMER0_CLK_WITH_256_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER0_CLK_WITH_1024_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
    11f6:	a3 e5       	ldi	r26, 0x53	; 83
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e3 e5       	ldi	r30, 0x53	; 83
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	88 7f       	andi	r24, 0xF8	; 248
    1202:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_CLK_WITH_1024_PRESCALER_MSK;
    1204:	a3 e5       	ldi	r26, 0x53	; 83
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e3 e5       	ldi	r30, 0x53	; 83
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	85 60       	ori	r24, 0x05	; 5
    1210:	8c 93       	st	X, r24
	case TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <Timer1_PWM_DutyCycle>:
 *					 5. Setup the direction for OC1B as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer1_PWM_DutyCycle(uint16  duty_cycle)
{
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <Timer1_PWM_DutyCycle+0xa>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    1230:	ec e4       	ldi	r30, 0x4C	; 76
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	11 82       	std	Z+1, r1	; 0x01
    1236:	10 82       	st	Z, r1
	/*
	 * use fast mode with top value at OCRA reg
	 * diconnect OC1A PIN ,and generate the PWM on OC1B PIN
	 */
	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    1238:	ea e4       	ldi	r30, 0x4A	; 74
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	83 ec       	ldi	r24, 0xC3	; 195
    123e:	99 e0       	ldi	r25, 0x09	; 9
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	80 83       	st	Z, r24
	OCR1B_REG = ((float32)duty_cycle / 100) * 65535;
    1244:	08 e4       	ldi	r16, 0x48	; 72
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	cc 01       	movw	r24, r24
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	48 ec       	ldi	r20, 0xC8	; 200
    1268:	52 e4       	ldi	r21, 0x42	; 66
    126a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	f8 01       	movw	r30, r16
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
	TCCR1B_REG &= TIMER1_MODE_clr_B_MSK;

	TCCR1A_REG |= TIMER1_MODE_PWM_PHASE_CORRECT_A_MSK;
	TCCR1B_REG |= TIMER1_MODE_PWM_PHASE_CORRECT_B_MSK;
#elif TIMER1_MODE_SELECTOR ==TIMER1_MODE_FAST_PWM_MSK
	TCCR1A_REG &= TIMER1_MODE_clr_A_MSK;
    1298:	af e4       	ldi	r26, 0x4F	; 79
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ef e4       	ldi	r30, 0x4F	; 79
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8c 7f       	andi	r24, 0xFC	; 252
    12a4:	8c 93       	st	X, r24
	TCCR1B_REG &= TIMER1_MODE_clr_B_MSK;
    12a6:	ae e4       	ldi	r26, 0x4E	; 78
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ee e4       	ldi	r30, 0x4E	; 78
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	87 7e       	andi	r24, 0xE7	; 231
    12b2:	8c 93       	st	X, r24

	TCCR1A_REG |= TIMER1_MODE_FAST_PWM_A_MSK;
    12b4:	af e4       	ldi	r26, 0x4F	; 79
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ef e4       	ldi	r30, 0x4F	; 79
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	83 60       	ori	r24, 0x03	; 3
    12c0:	8c 93       	st	X, r24
	TCCR1B_REG |= TIMER1_MODE_FAST_PWM_B_MSK;
    12c2:	ae e4       	ldi	r26, 0x4E	; 78
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ee e4       	ldi	r30, 0x4E	; 78
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	88 61       	ori	r24, 0x18	; 24
    12ce:	8c 93       	st	X, r24
#endif

	GPIO_SetPinDir(TIMER1_OC1B_PORT, TIMER1_OC1B_Pin, pin_output);
    12d0:	83 e0       	ldi	r24, 0x03	; 3
    12d2:	64 e0       	ldi	r22, 0x04	; 4
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>

#if TIMER1_OC1_BEHAVIOR_SELECTOR == TIMER1_OC1_NON_INVERTING_MSK
	TCCR1A_REG &= TIMER1_OC1B_clr_MSK;
    12da:	af e4       	ldi	r26, 0x4F	; 79
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ef e4       	ldi	r30, 0x4F	; 79
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7c       	andi	r24, 0xCF	; 207
    12e6:	8c 93       	st	X, r24
	TCCR1A_REG |= TIMER1_OC1B_NON_INVERTING_MSK;
    12e8:	af e4       	ldi	r26, 0x4F	; 79
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e4       	ldi	r30, 0x4F	; 79
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 62       	ori	r24, 0x20	; 32
    12f4:	8c 93       	st	X, r24
	case TIMER1_CLK_WITH_NO_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_NO_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_8_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    12f6:	ae e4       	ldi	r26, 0x4E	; 78
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ee e4       	ldi	r30, 0x4E	; 78
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	88 7f       	andi	r24, 0xF8	; 248
    1302:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_8_PRESCALER_MSK;
    1304:	ae e4       	ldi	r26, 0x4E	; 78
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ee e4       	ldi	r30, 0x4E	; 78
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	8c 93       	st	X, r24
	case TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <Timer2_PWM_DutyCycle>:
 *					 5. Setup the direction for OCR2 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer2_PWM_DutyCycle(uint8 duty_cycle)
{
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01

	/* Initial value for Timer/Counter2 */
	TCNT2_REG = TIMER2_INITIAL_VALUE;
    1330:	e4 e4       	ldi	r30, 0x44	; 68
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter2 */
	OCR2_REG = ((float32)duty_cycle / 100) * 255;
    1336:	03 e4       	ldi	r16, 0x43	; 67
    1338:	10 e0       	ldi	r17, 0x00	; 0
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	88 2f       	mov	r24, r24
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	48 ec       	ldi	r20, 0xC8	; 200
    135a:	52 e4       	ldi	r21, 0x42	; 66
    135c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	4f e7       	ldi	r20, 0x7F	; 127
    136e:	53 e4       	ldi	r21, 0x43	; 67
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	f8 01       	movw	r30, r16
    1386:	80 83       	st	Z, r24
	case TIMER2_CLK_WITH_256_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
		TCCR2_REG |= TIMER2_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER2_CLK_WITH_1024_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
    1388:	a5 e4       	ldi	r26, 0x45	; 69
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e4       	ldi	r30, 0x45	; 69
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	88 7f       	andi	r24, 0xF8	; 248
    1394:	8c 93       	st	X, r24
		TCCR2_REG |= TIMER2_CLK_WITH_1024_PRESCALER_MSK;
    1396:	a5 e4       	ldi	r26, 0x45	; 69
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e5 e4       	ldi	r30, 0x45	; 69
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	87 60       	ori	r24, 0x07	; 7
    13a2:	8c 93       	st	X, r24
		break;
	}
}
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <GI_Enable>:
 * [FUNCTION NAME]: GI_Enable
 * [DISCRIPTION]  : This Function used to enable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Enable(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I);
    13b8:	af e5       	ldi	r26, 0x5F	; 95
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ef e5       	ldi	r30, 0x5F	; 95
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 68       	ori	r24, 0x80	; 128
    13c4:	8c 93       	st	X, r24
}
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <GI_Disable>:
 * [FUNCTION NAME]: GI_Disable
 * [DISCRIPTION]  : This Function used to Disable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Disable(void)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I);
    13d4:	af e5       	ldi	r26, 0x5F	; 95
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ef e5       	ldi	r30, 0x5F	; 95
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8f 77       	andi	r24, 0x7F	; 127
    13e0:	8c 93       	st	X, r24
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <GPIO_SetPinDir>:
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/

void GPIO_SetPinDir(uint8 PORTn, uint8 PINn, GPIO_PinDirection Dir)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <GPIO_SetPinDir+0x6>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <GPIO_SetPinDir+0x8>
    13f0:	0f 92       	push	r0
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	6a 83       	std	Y+2, r22	; 0x02
    13fa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number.
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	84 30       	cpi	r24, 0x04	; 4
    1400:	08 f0       	brcs	.+2      	; 0x1404 <GPIO_SetPinDir+0x1c>
    1402:	d5 c0       	rjmp	.+426    	; 0x15ae <GPIO_SetPinDir+0x1c6>
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	88 30       	cpi	r24, 0x08	; 8
    1408:	08 f0       	brcs	.+2      	; 0x140c <GPIO_SetPinDir+0x24>
    140a:	d1 c0       	rjmp	.+418    	; 0x15ae <GPIO_SetPinDir+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(PORTn)
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	3d 83       	std	Y+5, r19	; 0x05
    1414:	2c 83       	std	Y+4, r18	; 0x04
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	91 05       	cpc	r25, r1
    141e:	09 f4       	brne	.+2      	; 0x1422 <GPIO_SetPinDir+0x3a>
    1420:	43 c0       	rjmp	.+134    	; 0x14a8 <GPIO_SetPinDir+0xc0>
    1422:	2c 81       	ldd	r18, Y+4	; 0x04
    1424:	3d 81       	ldd	r19, Y+5	; 0x05
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	2c f4       	brge	.+10     	; 0x1436 <GPIO_SetPinDir+0x4e>
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	71 f0       	breq	.+28     	; 0x1450 <GPIO_SetPinDir+0x68>
    1434:	bc c0       	rjmp	.+376    	; 0x15ae <GPIO_SetPinDir+0x1c6>
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <GPIO_SetPinDir+0x5a>
    1440:	5f c0       	rjmp	.+190    	; 0x1500 <GPIO_SetPinDir+0x118>
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <GPIO_SetPinDir+0x66>
    144c:	85 c0       	rjmp	.+266    	; 0x1558 <GPIO_SetPinDir+0x170>
    144e:	af c0       	rjmp	.+350    	; 0x15ae <GPIO_SetPinDir+0x1c6>
		{
		case PORTA_ID:
			if(Dir == pin_output)
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	a1 f4       	brne	.+40     	; 0x147e <GPIO_SetPinDir+0x96>
			{
				SET_BIT(DDRA_REG,PINn);
    1456:	aa e3       	ldi	r26, 0x3A	; 58
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ea e3       	ldi	r30, 0x3A	; 58
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_SetPinDir+0x8c>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_SetPinDir+0x88>
    1478:	84 2b       	or	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	98 c0       	rjmp	.+304    	; 0x15ae <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,PINn);
    147e:	aa e3       	ldi	r26, 0x3A	; 58
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ea e3       	ldi	r30, 0x3A	; 58
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_SetPinDir+0xb4>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_SetPinDir+0xb0>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	83 c0       	rjmp	.+262    	; 0x15ae <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTB_ID:
			if(Dir == pin_output)
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	a1 f4       	brne	.+40     	; 0x14d6 <GPIO_SetPinDir+0xee>
			{
				SET_BIT(DDRB_REG,PINn);
    14ae:	a7 e3       	ldi	r26, 0x37	; 55
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e3       	ldi	r30, 0x37	; 55
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_SetPinDir+0xe4>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_SetPinDir+0xe0>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	6c c0       	rjmp	.+216    	; 0x15ae <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,PINn);
    14d6:	a7 e3       	ldi	r26, 0x37	; 55
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e7 e3       	ldi	r30, 0x37	; 55
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_SetPinDir+0x10c>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_SetPinDir+0x108>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	57 c0       	rjmp	.+174    	; 0x15ae <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTC_ID:
			if(Dir == pin_output)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	a1 f4       	brne	.+40     	; 0x152e <GPIO_SetPinDir+0x146>
			{
				SET_BIT(DDRC_REG,PINn);
    1506:	a4 e3       	ldi	r26, 0x34	; 52
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e4 e3       	ldi	r30, 0x34	; 52
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_SetPinDir+0x13c>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_SetPinDir+0x138>
    1528:	84 2b       	or	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	40 c0       	rjmp	.+128    	; 0x15ae <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,PINn);
    152e:	a4 e3       	ldi	r26, 0x34	; 52
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e4 e3       	ldi	r30, 0x34	; 52
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <GPIO_SetPinDir+0x164>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <GPIO_SetPinDir+0x160>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	2b c0       	rjmp	.+86     	; 0x15ae <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTD_ID:
			if(Dir == pin_output)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	a1 f4       	brne	.+40     	; 0x1586 <GPIO_SetPinDir+0x19e>
			{
				SET_BIT(DDRD_REG,PINn);
    155e:	a1 e3       	ldi	r26, 0x31	; 49
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e1 e3       	ldi	r30, 0x31	; 49
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <GPIO_SetPinDir+0x194>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <GPIO_SetPinDir+0x190>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,PINn);
    1586:	a1 e3       	ldi	r26, 0x31	; 49
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e1 e3       	ldi	r30, 0x31	; 49
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_SetPinDir+0x1bc>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_SetPinDir+0x1b8>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <GPIO_ReadPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPin(uint8 PORTn, uint8 PINn)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <GPIO_ReadPin+0x6>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <GPIO_ReadPin+0x8>
    15c6:	0f 92       	push	r0
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    15d0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	84 30       	cpi	r24, 0x04	; 4
    15d6:	08 f0       	brcs	.+2      	; 0x15da <GPIO_ReadPin+0x1c>
    15d8:	84 c0       	rjmp	.+264    	; 0x16e2 <GPIO_ReadPin+0x124>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 30       	cpi	r24, 0x08	; 8
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <GPIO_ReadPin+0x24>
    15e0:	80 c0       	rjmp	.+256    	; 0x16e2 <GPIO_ReadPin+0x124>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the pin value as required */
		switch(PORTn)
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3d 83       	std	Y+5, r19	; 0x05
    15ea:	2c 83       	std	Y+4, r18	; 0x04
    15ec:	4c 81       	ldd	r20, Y+4	; 0x04
    15ee:	5d 81       	ldd	r21, Y+5	; 0x05
    15f0:	41 30       	cpi	r20, 0x01	; 1
    15f2:	51 05       	cpc	r21, r1
    15f4:	79 f1       	breq	.+94     	; 0x1654 <GPIO_ReadPin+0x96>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	91 05       	cpc	r25, r1
    15fe:	34 f4       	brge	.+12     	; 0x160c <GPIO_ReadPin+0x4e>
    1600:	2c 81       	ldd	r18, Y+4	; 0x04
    1602:	3d 81       	ldd	r19, Y+5	; 0x05
    1604:	21 15       	cp	r18, r1
    1606:	31 05       	cpc	r19, r1
    1608:	69 f0       	breq	.+26     	; 0x1624 <GPIO_ReadPin+0x66>
    160a:	6b c0       	rjmp	.+214    	; 0x16e2 <GPIO_ReadPin+0x124>
    160c:	4c 81       	ldd	r20, Y+4	; 0x04
    160e:	5d 81       	ldd	r21, Y+5	; 0x05
    1610:	42 30       	cpi	r20, 0x02	; 2
    1612:	51 05       	cpc	r21, r1
    1614:	b9 f1       	breq	.+110    	; 0x1684 <GPIO_ReadPin+0xc6>
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	09 f4       	brne	.+2      	; 0x1622 <GPIO_ReadPin+0x64>
    1620:	49 c0       	rjmp	.+146    	; 0x16b4 <GPIO_ReadPin+0xf6>
    1622:	5f c0       	rjmp	.+190    	; 0x16e2 <GPIO_ReadPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,PINn))
    1624:	e9 e3       	ldi	r30, 0x39	; 57
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_ReadPin+0x7e>
    1638:	55 95       	asr	r21
    163a:	47 95       	ror	r20
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_ReadPin+0x7a>
    1640:	ca 01       	movw	r24, r20
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	90 70       	andi	r25, 0x00	; 0
    1646:	88 23       	and	r24, r24
    1648:	19 f0       	breq	.+6      	; 0x1650 <GPIO_ReadPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	49 c0       	rjmp	.+146    	; 0x16e2 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1650:	19 82       	std	Y+1, r1	; 0x01
    1652:	47 c0       	rjmp	.+142    	; 0x16e2 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,PINn))
    1654:	e6 e3       	ldi	r30, 0x36	; 54
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a9 01       	movw	r20, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_ReadPin+0xae>
    1668:	55 95       	asr	r21
    166a:	47 95       	ror	r20
    166c:	8a 95       	dec	r24
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_ReadPin+0xaa>
    1670:	ca 01       	movw	r24, r20
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	90 70       	andi	r25, 0x00	; 0
    1676:	88 23       	and	r24, r24
    1678:	19 f0       	breq	.+6      	; 0x1680 <GPIO_ReadPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	31 c0       	rjmp	.+98     	; 0x16e2 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1680:	19 82       	std	Y+1, r1	; 0x01
    1682:	2f c0       	rjmp	.+94     	; 0x16e2 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,PINn))
    1684:	e3 e3       	ldi	r30, 0x33	; 51
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_ReadPin+0xde>
    1698:	55 95       	asr	r21
    169a:	47 95       	ror	r20
    169c:	8a 95       	dec	r24
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_ReadPin+0xda>
    16a0:	ca 01       	movw	r24, r20
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	90 70       	andi	r25, 0x00	; 0
    16a6:	88 23       	and	r24, r24
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <GPIO_ReadPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	19 c0       	rjmp	.+50     	; 0x16e2 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	17 c0       	rjmp	.+46     	; 0x16e2 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,PINn))
    16b4:	e0 e3       	ldi	r30, 0x30	; 48
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a9 01       	movw	r20, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_ReadPin+0x10e>
    16c8:	55 95       	asr	r21
    16ca:	47 95       	ror	r20
    16cc:	8a 95       	dec	r24
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_ReadPin+0x10a>
    16d0:	ca 01       	movw	r24, r20
    16d2:	81 70       	andi	r24, 0x01	; 1
    16d4:	90 70       	andi	r25, 0x00	; 0
    16d6:	88 23       	and	r24, r24
    16d8:	19 f0       	breq	.+6      	; 0x16e0 <GPIO_ReadPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16e0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <GPIO_WritePin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePin(uint8 PORTn, uint8 PINn, STD_LevelType level)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <GPIO_WritePin+0x6>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <GPIO_WritePin+0x8>
    16fc:	0f 92       	push	r0
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	6a 83       	std	Y+2, r22	; 0x02
    1706:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	08 f0       	brcs	.+2      	; 0x1710 <GPIO_WritePin+0x1c>
    170e:	d5 c0       	rjmp	.+426    	; 0x18ba <GPIO_WritePin+0x1c6>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	88 30       	cpi	r24, 0x08	; 8
    1714:	08 f0       	brcs	.+2      	; 0x1718 <GPIO_WritePin+0x24>
    1716:	d1 c0       	rjmp	.+418    	; 0x18ba <GPIO_WritePin+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Write the pin value as required */
		switch(PORTn)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3d 83       	std	Y+5, r19	; 0x05
    1720:	2c 83       	std	Y+4, r18	; 0x04
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	9d 81       	ldd	r25, Y+5	; 0x05
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <GPIO_WritePin+0x3a>
    172c:	43 c0       	rjmp	.+134    	; 0x17b4 <GPIO_WritePin+0xc0>
    172e:	2c 81       	ldd	r18, Y+4	; 0x04
    1730:	3d 81       	ldd	r19, Y+5	; 0x05
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	2c f4       	brge	.+10     	; 0x1742 <GPIO_WritePin+0x4e>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	71 f0       	breq	.+28     	; 0x175c <GPIO_WritePin+0x68>
    1740:	bc c0       	rjmp	.+376    	; 0x18ba <GPIO_WritePin+0x1c6>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <GPIO_WritePin+0x5a>
    174c:	5f c0       	rjmp	.+190    	; 0x180c <GPIO_WritePin+0x118>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <GPIO_WritePin+0x66>
    1758:	85 c0       	rjmp	.+266    	; 0x1864 <GPIO_WritePin+0x170>
    175a:	af c0       	rjmp	.+350    	; 0x18ba <GPIO_WritePin+0x1c6>
		{
		case PORTA_ID:
			if(level == LOGIC_HIGH)
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	a1 f4       	brne	.+40     	; 0x178a <GPIO_WritePin+0x96>
			{
				SET_BIT(PORTA_REG,PINn);
    1762:	ab e3       	ldi	r26, 0x3B	; 59
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_WritePin+0x8c>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_WritePin+0x88>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	98 c0       	rjmp	.+304    	; 0x18ba <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,PINn);
    178a:	ab e3       	ldi	r26, 0x3B	; 59
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	eb e3       	ldi	r30, 0x3B	; 59
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_WritePin+0xb4>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_WritePin+0xb0>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	83 c0       	rjmp	.+262    	; 0x18ba <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(level == LOGIC_HIGH)
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <GPIO_WritePin+0xee>
			{
				SET_BIT(PORTB_REG,PINn);
    17ba:	a8 e3       	ldi	r26, 0x38	; 56
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e3       	ldi	r30, 0x38	; 56
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_WritePin+0xe4>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_WritePin+0xe0>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	6c c0       	rjmp	.+216    	; 0x18ba <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,PINn);
    17e2:	a8 e3       	ldi	r26, 0x38	; 56
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e8 e3       	ldi	r30, 0x38	; 56
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_WritePin+0x10c>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_WritePin+0x108>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	57 c0       	rjmp	.+174    	; 0x18ba <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(level == LOGIC_HIGH)
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	a1 f4       	brne	.+40     	; 0x183a <GPIO_WritePin+0x146>
			{
				SET_BIT(PORTC_REG,PINn);
    1812:	a5 e3       	ldi	r26, 0x35	; 53
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e5 e3       	ldi	r30, 0x35	; 53
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <GPIO_WritePin+0x13c>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <GPIO_WritePin+0x138>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	40 c0       	rjmp	.+128    	; 0x18ba <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,PINn);
    183a:	a5 e3       	ldi	r26, 0x35	; 53
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e3       	ldi	r30, 0x35	; 53
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <GPIO_WritePin+0x164>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <GPIO_WritePin+0x160>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	2b c0       	rjmp	.+86     	; 0x18ba <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(level == LOGIC_HIGH)
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	a1 f4       	brne	.+40     	; 0x1892 <GPIO_WritePin+0x19e>
			{
				SET_BIT(PORTD_REG,PINn);
    186a:	a2 e3       	ldi	r26, 0x32	; 50
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e2 e3       	ldi	r30, 0x32	; 50
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <GPIO_WritePin+0x194>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <GPIO_WritePin+0x190>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,PINn);
    1892:	a2 e3       	ldi	r26, 0x32	; 50
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e2 e3       	ldi	r30, 0x32	; 50
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_WritePin+0x1bc>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_WritePin+0x1b8>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <GPIO_FlipPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPin(uint8 PORTn, uint8 PINn)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <GPIO_FlipPin+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <GPIO_FlipPin+0x8>
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	84 30       	cpi	r24, 0x04	; 4
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <GPIO_FlipPin+0x18>
    18e0:	72 c0       	rjmp	.+228    	; 0x19c6 <GPIO_FlipPin+0xfc>
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	88 30       	cpi	r24, 0x08	; 8
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <GPIO_FlipPin+0x20>
    18e8:	6e c0       	rjmp	.+220    	; 0x19c6 <GPIO_FlipPin+0xfc>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Flip the pin value as required */
		switch(PORTn)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3c 83       	std	Y+4, r19	; 0x04
    18f2:	2b 83       	std	Y+3, r18	; 0x03
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	49 f1       	breq	.+82     	; 0x1950 <GPIO_FlipPin+0x86>
    18fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1900:	3c 81       	ldd	r19, Y+4	; 0x04
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	2c f4       	brge	.+10     	; 0x1912 <GPIO_FlipPin+0x48>
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	61 f0       	breq	.+24     	; 0x1928 <GPIO_FlipPin+0x5e>
    1910:	5a c0       	rjmp	.+180    	; 0x19c6 <GPIO_FlipPin+0xfc>
    1912:	2b 81       	ldd	r18, Y+3	; 0x03
    1914:	3c 81       	ldd	r19, Y+4	; 0x04
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	71 f1       	breq	.+92     	; 0x1978 <GPIO_FlipPin+0xae>
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	91 05       	cpc	r25, r1
    1924:	e9 f1       	breq	.+122    	; 0x19a0 <GPIO_FlipPin+0xd6>
    1926:	4f c0       	rjmp	.+158    	; 0x19c6 <GPIO_FlipPin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA_REG,PINn);
    1928:	ab e3       	ldi	r26, 0x3B	; 59
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	eb e3       	ldi	r30, 0x3B	; 59
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GPIO_FlipPin+0x7c>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <GPIO_FlipPin+0x78>
    194a:	84 27       	eor	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	3b c0       	rjmp	.+118    	; 0x19c6 <GPIO_FlipPin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_REG,PINn);
    1950:	a8 e3       	ldi	r26, 0x38	; 56
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e8 e3       	ldi	r30, 0x38	; 56
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_FlipPin+0xa4>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_FlipPin+0xa0>
    1972:	84 27       	eor	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	27 c0       	rjmp	.+78     	; 0x19c6 <GPIO_FlipPin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_REG,PINn);
    1978:	a5 e3       	ldi	r26, 0x35	; 53
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e5 e3       	ldi	r30, 0x35	; 53
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <GPIO_FlipPin+0xcc>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <GPIO_FlipPin+0xc8>
    199a:	84 27       	eor	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	13 c0       	rjmp	.+38     	; 0x19c6 <GPIO_FlipPin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_REG,PINn);
    19a0:	a2 e3       	ldi	r26, 0x32	; 50
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e2 e3       	ldi	r30, 0x32	; 50
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <GPIO_FlipPin+0xf4>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <GPIO_FlipPin+0xf0>
    19c2:	84 27       	eor	r24, r20
    19c4:	8c 93       	st	X, r24
			break;
		}
	}
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <GPIO_SetPortDir>:
 [Args]: PORTn_ID(n=A,B,C,D) and Direction (input_port or output_port)
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_SetPortDir(uint8 PORTn, GPIO_PortDirection Dir)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <GPIO_SetPortDir+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <GPIO_SetPortDir+0x8>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	84 30       	cpi	r24, 0x04	; 4
    19e8:	90 f5       	brcc	.+100    	; 0x1a4e <GPIO_SetPortDir+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3c 83       	std	Y+4, r19	; 0x04
    19f2:	2b 83       	std	Y+3, r18	; 0x03
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 05       	cpc	r25, r1
    19fc:	d1 f0       	breq	.+52     	; 0x1a32 <GPIO_SetPortDir+0x5e>
    19fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1a00:	3c 81       	ldd	r19, Y+4	; 0x04
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <GPIO_SetPortDir+0x3e>
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <GPIO_SetPortDir+0x54>
    1a10:	1e c0       	rjmp	.+60     	; 0x1a4e <GPIO_SetPortDir+0x7a>
    1a12:	2b 81       	ldd	r18, Y+3	; 0x03
    1a14:	3c 81       	ldd	r19, Y+4	; 0x04
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	81 f0       	breq	.+32     	; 0x1a3c <GPIO_SetPortDir+0x68>
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	91 05       	cpc	r25, r1
    1a24:	81 f0       	breq	.+32     	; 0x1a46 <GPIO_SetPortDir+0x72>
    1a26:	13 c0       	rjmp	.+38     	; 0x1a4e <GPIO_SetPortDir+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = Dir;
    1a28:	ea e3       	ldi	r30, 0x3A	; 58
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	80 83       	st	Z, r24
    1a30:	0e c0       	rjmp	.+28     	; 0x1a4e <GPIO_SetPortDir+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = Dir;
    1a32:	e7 e3       	ldi	r30, 0x37	; 55
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	80 83       	st	Z, r24
    1a3a:	09 c0       	rjmp	.+18     	; 0x1a4e <GPIO_SetPortDir+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = Dir;
    1a3c:	e4 e3       	ldi	r30, 0x34	; 52
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	80 83       	st	Z, r24
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <GPIO_SetPortDir+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = Dir;
    1a46:	e1 e3       	ldi	r30, 0x31	; 49
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <GPIO_ReadPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPort(uint8 PORTn)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <GPIO_ReadPort+0x6>
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <GPIO_ReadPort+0x8>
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1a6a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	84 30       	cpi	r24, 0x04	; 4
    1a70:	90 f5       	brcc	.+100    	; 0x1ad6 <GPIO_ReadPort+0x7a>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the port value as required */
		switch(PORTn)
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3c 83       	std	Y+4, r19	; 0x04
    1a7a:	2b 83       	std	Y+3, r18	; 0x03
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	91 05       	cpc	r25, r1
    1a84:	d1 f0       	breq	.+52     	; 0x1aba <GPIO_ReadPort+0x5e>
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <GPIO_ReadPort+0x3e>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <GPIO_ReadPort+0x54>
    1a98:	1e c0       	rjmp	.+60     	; 0x1ad6 <GPIO_ReadPort+0x7a>
    1a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	81 f0       	breq	.+32     	; 0x1ac4 <GPIO_ReadPort+0x68>
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	81 f0       	breq	.+32     	; 0x1ace <GPIO_ReadPort+0x72>
    1aae:	13 c0       	rjmp	.+38     	; 0x1ad6 <GPIO_ReadPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA_REG;
    1ab0:	e9 e3       	ldi	r30, 0x39	; 57
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	0e c0       	rjmp	.+28     	; 0x1ad6 <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB_REG;
    1aba:	e6 e3       	ldi	r30, 0x36	; 54
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	09 c0       	rjmp	.+18     	; 0x1ad6 <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC_REG;
    1ac4:	e3 e3       	ldi	r30, 0x33	; 51
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND_REG;
    1ace:	e0 e3       	ldi	r30, 0x30	; 48
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <GPIO_WritePort>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePort(uint8 PORTn, uint8 value)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <GPIO_WritePort+0x6>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <GPIO_WritePort+0x8>
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	84 30       	cpi	r24, 0x04	; 4
    1afa:	90 f5       	brcc	.+100    	; 0x1b60 <GPIO_WritePort+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	3c 83       	std	Y+4, r19	; 0x04
    1b04:	2b 83       	std	Y+3, r18	; 0x03
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	d1 f0       	breq	.+52     	; 0x1b44 <GPIO_WritePort+0x5e>
    1b10:	2b 81       	ldd	r18, Y+3	; 0x03
    1b12:	3c 81       	ldd	r19, Y+4	; 0x04
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <GPIO_WritePort+0x3e>
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <GPIO_WritePort+0x54>
    1b22:	1e c0       	rjmp	.+60     	; 0x1b60 <GPIO_WritePort+0x7a>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	81 f0       	breq	.+32     	; 0x1b4e <GPIO_WritePort+0x68>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	81 f0       	breq	.+32     	; 0x1b58 <GPIO_WritePort+0x72>
    1b38:	13 c0       	rjmp	.+38     	; 0x1b60 <GPIO_WritePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    1b3a:	eb e3       	ldi	r30, 0x3B	; 59
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	80 83       	st	Z, r24
    1b42:	0e c0       	rjmp	.+28     	; 0x1b60 <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    1b44:	e8 e3       	ldi	r30, 0x38	; 56
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	80 83       	st	Z, r24
    1b4c:	09 c0       	rjmp	.+18     	; 0x1b60 <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    1b4e:	e5 e3       	ldi	r30, 0x35	; 53
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	80 83       	st	Z, r24
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    1b58:	e2 e3       	ldi	r30, 0x32	; 50
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <GPIO_FlipPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPort(uint8 PORTn)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <GPIO_FlipPort+0x6>
    1b74:	0f 92       	push	r0
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	84 30       	cpi	r24, 0x04	; 4
    1b80:	08 f0       	brcs	.+2      	; 0x1b84 <GPIO_FlipPort+0x16>
    1b82:	3e c0       	rjmp	.+124    	; 0x1c00 <GPIO_FlipPort+0x92>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	3b 83       	std	Y+3, r19	; 0x03
    1b8c:	2a 83       	std	Y+2, r18	; 0x02
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	e9 f0       	breq	.+58     	; 0x1bd2 <GPIO_FlipPort+0x64>
    1b98:	2a 81       	ldd	r18, Y+2	; 0x02
    1b9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <GPIO_FlipPort+0x3e>
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <GPIO_FlipPort+0x54>
    1baa:	2a c0       	rjmp	.+84     	; 0x1c00 <GPIO_FlipPort+0x92>
    1bac:	2a 81       	ldd	r18, Y+2	; 0x02
    1bae:	3b 81       	ldd	r19, Y+3	; 0x03
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	b1 f0       	breq	.+44     	; 0x1be2 <GPIO_FlipPort+0x74>
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	c9 f0       	breq	.+50     	; 0x1bf2 <GPIO_FlipPort+0x84>
    1bc0:	1f c0       	rjmp	.+62     	; 0x1c00 <GPIO_FlipPort+0x92>
		{
		case PORTA_ID:
			PORTA_REG = ~PORTA_REG;
    1bc2:	ab e3       	ldi	r26, 0x3B	; 59
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	eb e3       	ldi	r30, 0x3B	; 59
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 95       	com	r24
    1bce:	8c 93       	st	X, r24
    1bd0:	17 c0       	rjmp	.+46     	; 0x1c00 <GPIO_FlipPort+0x92>
			break;
		case PORTB_ID:
			PORTB_REG = ~PORTB_REG;
    1bd2:	a8 e3       	ldi	r26, 0x38	; 56
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e8 e3       	ldi	r30, 0x38	; 56
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	80 95       	com	r24
    1bde:	8c 93       	st	X, r24
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <GPIO_FlipPort+0x92>
			break;
		case PORTC_ID:
			PORTC_REG = ~PORTC_REG;
    1be2:	a5 e3       	ldi	r26, 0x35	; 53
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e5 e3       	ldi	r30, 0x35	; 53
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	80 95       	com	r24
    1bee:	8c 93       	st	X, r24
    1bf0:	07 c0       	rjmp	.+14     	; 0x1c00 <GPIO_FlipPort+0x92>
			break;
		case PORTD_ID:
			PORTD_REG = ~PORTD_REG;
    1bf2:	a2 e3       	ldi	r26, 0x32	; 50
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e2 e3       	ldi	r30, 0x32	; 50
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 95       	com	r24
    1bfe:	8c 93       	st	X, r24
			break;
		}
	}
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <GPIO_WriteLowNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteLowNibble(uint8 PORTn, uint8 value)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <GPIO_WriteLowNibble+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <GPIO_WriteLowNibble+0x8>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <GPIO_WriteLowNibble+0x18>
    1c22:	61 c0       	rjmp	.+194    	; 0x1ce6 <GPIO_WriteLowNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0x0F;
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	8f 70       	andi	r24, 0x0F	; 15
    1c28:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	3c 83       	std	Y+4, r19	; 0x04
    1c32:	2b 83       	std	Y+3, r18	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	29 f1       	breq	.+74     	; 0x1c88 <GPIO_WriteLowNibble+0x7c>
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	3c 81       	ldd	r19, Y+4	; 0x04
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <GPIO_WriteLowNibble+0x46>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	61 f0       	breq	.+24     	; 0x1c68 <GPIO_WriteLowNibble+0x5c>
    1c50:	4a c0       	rjmp	.+148    	; 0x1ce6 <GPIO_WriteLowNibble+0xda>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	22 30       	cpi	r18, 0x02	; 2
    1c58:	31 05       	cpc	r19, r1
    1c5a:	31 f1       	breq	.+76     	; 0x1ca8 <GPIO_WriteLowNibble+0x9c>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	83 30       	cpi	r24, 0x03	; 3
    1c62:	91 05       	cpc	r25, r1
    1c64:	89 f1       	breq	.+98     	; 0x1cc8 <GPIO_WriteLowNibble+0xbc>
    1c66:	3f c0       	rjmp	.+126    	; 0x1ce6 <GPIO_WriteLowNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0xF0;
    1c68:	ab e3       	ldi	r26, 0x3B	; 59
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	eb e3       	ldi	r30, 0x3B	; 59
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	80 7f       	andi	r24, 0xF0	; 240
    1c74:	8c 93       	st	X, r24
			PORTA_REG |= value;
    1c76:	ab e3       	ldi	r26, 0x3B	; 59
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	eb e3       	ldi	r30, 0x3B	; 59
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	90 81       	ld	r25, Z
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	89 2b       	or	r24, r25
    1c84:	8c 93       	st	X, r24
    1c86:	2f c0       	rjmp	.+94     	; 0x1ce6 <GPIO_WriteLowNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0xF0;
    1c88:	a8 e3       	ldi	r26, 0x38	; 56
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e8 e3       	ldi	r30, 0x38	; 56
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 7f       	andi	r24, 0xF0	; 240
    1c94:	8c 93       	st	X, r24
			PORTB_REG |= value;
    1c96:	a8 e3       	ldi	r26, 0x38	; 56
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e8 e3       	ldi	r30, 0x38	; 56
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	90 81       	ld	r25, Z
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	89 2b       	or	r24, r25
    1ca4:	8c 93       	st	X, r24
    1ca6:	1f c0       	rjmp	.+62     	; 0x1ce6 <GPIO_WriteLowNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0xF0;
    1ca8:	a5 e3       	ldi	r26, 0x35	; 53
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e5 e3       	ldi	r30, 0x35	; 53
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 7f       	andi	r24, 0xF0	; 240
    1cb4:	8c 93       	st	X, r24
			PORTC_REG |= value;
    1cb6:	a5 e3       	ldi	r26, 0x35	; 53
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e5 e3       	ldi	r30, 0x35	; 53
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	90 81       	ld	r25, Z
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	89 2b       	or	r24, r25
    1cc4:	8c 93       	st	X, r24
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <GPIO_WriteLowNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0xF0;
    1cc8:	a2 e3       	ldi	r26, 0x32	; 50
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e2 e3       	ldi	r30, 0x32	; 50
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 7f       	andi	r24, 0xF0	; 240
    1cd4:	8c 93       	st	X, r24
			PORTD_REG |= value;
    1cd6:	a2 e3       	ldi	r26, 0x32	; 50
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e2 e3       	ldi	r30, 0x32	; 50
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	90 81       	ld	r25, Z
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	89 2b       	or	r24, r25
    1ce4:	8c 93       	st	X, r24
			break;
		}
	}
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <GPIO_WriteHighNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteHighNibble(uint8 PORTn, uint8 value)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <GPIO_WriteHighNibble+0x6>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <GPIO_WriteHighNibble+0x8>
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	84 30       	cpi	r24, 0x04	; 4
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <GPIO_WriteHighNibble+0x18>
    1d0a:	61 c0       	rjmp	.+194    	; 0x1dce <GPIO_WriteHighNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0xF0;
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	80 7f       	andi	r24, 0xF0	; 240
    1d10:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3c 83       	std	Y+4, r19	; 0x04
    1d1a:	2b 83       	std	Y+3, r18	; 0x03
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	91 05       	cpc	r25, r1
    1d24:	29 f1       	breq	.+74     	; 0x1d70 <GPIO_WriteHighNibble+0x7c>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <GPIO_WriteHighNibble+0x46>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <GPIO_WriteHighNibble+0x5c>
    1d38:	4a c0       	rjmp	.+148    	; 0x1dce <GPIO_WriteHighNibble+0xda>
    1d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	31 f1       	breq	.+76     	; 0x1d90 <GPIO_WriteHighNibble+0x9c>
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	89 f1       	breq	.+98     	; 0x1db0 <GPIO_WriteHighNibble+0xbc>
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <GPIO_WriteHighNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0x0F;
    1d50:	ab e3       	ldi	r26, 0x3B	; 59
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	eb e3       	ldi	r30, 0x3B	; 59
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 70       	andi	r24, 0x0F	; 15
    1d5c:	8c 93       	st	X, r24
			PORTA_REG |= value;
    1d5e:	ab e3       	ldi	r26, 0x3B	; 59
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	eb e3       	ldi	r30, 0x3B	; 59
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	90 81       	ld	r25, Z
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	89 2b       	or	r24, r25
    1d6c:	8c 93       	st	X, r24
    1d6e:	2f c0       	rjmp	.+94     	; 0x1dce <GPIO_WriteHighNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0x0F;
    1d70:	a8 e3       	ldi	r26, 0x38	; 56
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e8 e3       	ldi	r30, 0x38	; 56
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 70       	andi	r24, 0x0F	; 15
    1d7c:	8c 93       	st	X, r24
			PORTB_REG |= value;
    1d7e:	a8 e3       	ldi	r26, 0x38	; 56
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	90 81       	ld	r25, Z
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	89 2b       	or	r24, r25
    1d8c:	8c 93       	st	X, r24
    1d8e:	1f c0       	rjmp	.+62     	; 0x1dce <GPIO_WriteHighNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0x0F;
    1d90:	a5 e3       	ldi	r26, 0x35	; 53
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e3       	ldi	r30, 0x35	; 53
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8f 70       	andi	r24, 0x0F	; 15
    1d9c:	8c 93       	st	X, r24
			PORTC_REG |= value;
    1d9e:	a5 e3       	ldi	r26, 0x35	; 53
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 e3       	ldi	r30, 0x35	; 53
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	90 81       	ld	r25, Z
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	89 2b       	or	r24, r25
    1dac:	8c 93       	st	X, r24
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <GPIO_WriteHighNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0x0F;
    1db0:	a2 e3       	ldi	r26, 0x32	; 50
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e2 e3       	ldi	r30, 0x32	; 50
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 70       	andi	r24, 0x0F	; 15
    1dbc:	8c 93       	st	X, r24
			PORTD_REG |= value;
    1dbe:	a2 e3       	ldi	r26, 0x32	; 50
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e2 e3       	ldi	r30, 0x32	; 50
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	90 81       	ld	r25, Z
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	89 2b       	or	r24, r25
    1dcc:	8c 93       	st	X, r24
			break;
		}
	}
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <__vector_1>:

/*
 * [Description]: Here The ISR's specific For EX_INT0
 */
ISR(INT0_vect)
{
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_INT0 != NULL_PTR)
    1e06:	80 91 6e 01 	lds	r24, 0x016E
    1e0a:	90 91 6f 01 	lds	r25, 0x016F
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	29 f0       	breq	.+10     	; 0x1e1c <__vector_1+0x40>
	{
		(*g_Ptr_To_Fun_INT0)();
    1e12:	e0 91 6e 01 	lds	r30, 0x016E
    1e16:	f0 91 6f 01 	lds	r31, 0x016F
    1e1a:	09 95       	icall
	}
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	bf 91       	pop	r27
    1e26:	af 91       	pop	r26
    1e28:	9f 91       	pop	r25
    1e2a:	8f 91       	pop	r24
    1e2c:	7f 91       	pop	r23
    1e2e:	6f 91       	pop	r22
    1e30:	5f 91       	pop	r21
    1e32:	4f 91       	pop	r20
    1e34:	3f 91       	pop	r19
    1e36:	2f 91       	pop	r18
    1e38:	0f 90       	pop	r0
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	0f 90       	pop	r0
    1e3e:	1f 90       	pop	r1
    1e40:	18 95       	reti

00001e42 <__vector_2>:

/*
 * [Description]: Here The ISR's specific For EX_INT1
 */
ISR(INT1_vect)
{
    1e42:	1f 92       	push	r1
    1e44:	0f 92       	push	r0
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	0f 92       	push	r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	ef 93       	push	r30
    1e62:	ff 93       	push	r31
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_INT1 != NULL_PTR)
    1e6c:	80 91 70 01 	lds	r24, 0x0170
    1e70:	90 91 71 01 	lds	r25, 0x0171
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <__vector_2+0x40>
	{
		(*g_Ptr_To_Fun_INT1)();
    1e78:	e0 91 70 01 	lds	r30, 0x0170
    1e7c:	f0 91 71 01 	lds	r31, 0x0171
    1e80:	09 95       	icall
	}
}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	ff 91       	pop	r31
    1e88:	ef 91       	pop	r30
    1e8a:	bf 91       	pop	r27
    1e8c:	af 91       	pop	r26
    1e8e:	9f 91       	pop	r25
    1e90:	8f 91       	pop	r24
    1e92:	7f 91       	pop	r23
    1e94:	6f 91       	pop	r22
    1e96:	5f 91       	pop	r21
    1e98:	4f 91       	pop	r20
    1e9a:	3f 91       	pop	r19
    1e9c:	2f 91       	pop	r18
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	0f 90       	pop	r0
    1ea4:	1f 90       	pop	r1
    1ea6:	18 95       	reti

00001ea8 <__vector_3>:

/*
 * [Description]: Here The ISR's specific For EX_INT2
 */
ISR(INT2_vect)
{
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	2f 93       	push	r18
    1eb4:	3f 93       	push	r19
    1eb6:	4f 93       	push	r20
    1eb8:	5f 93       	push	r21
    1eba:	6f 93       	push	r22
    1ebc:	7f 93       	push	r23
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	af 93       	push	r26
    1ec4:	bf 93       	push	r27
    1ec6:	ef 93       	push	r30
    1ec8:	ff 93       	push	r31
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_INT2 != NULL_PTR)
    1ed2:	80 91 72 01 	lds	r24, 0x0172
    1ed6:	90 91 73 01 	lds	r25, 0x0173
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	29 f0       	breq	.+10     	; 0x1ee8 <__vector_3+0x40>
	{
		(*g_Ptr_To_Fun_INT2)();
    1ede:	e0 91 72 01 	lds	r30, 0x0172
    1ee2:	f0 91 73 01 	lds	r31, 0x0173
    1ee6:	09 95       	icall
	}
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	0f 90       	pop	r0
    1f0a:	1f 90       	pop	r1
    1f0c:	18 95       	reti

00001f0e <Ex_INT_Init>:
 *                  The same time from Configuration of External interrupt .
 * [Args]  : void
 * [RUTURN]: Void
 */
void Ex_INT_Init(void)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
#if EX_INT0 == ENABLE
	/* Enable External Interrupt 0 */
	SET_BIT(GICR_REG,GICR_INT0);
    1f16:	ab e5       	ldi	r26, 0x5B	; 91
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	eb e5       	ldi	r30, 0x5B	; 91
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 64       	ori	r24, 0x40	; 64
    1f22:	8c 93       	st	X, r24
	GPIO_SetPinDir(EX_INT0_PORT, EX_INT0_PIN, pin_input);
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
	MCUCR_REG &= INT0_SENSE_CLR_MASK;
#elif INT0_SENSE_SELECTOR == INT0_SENSE_ANY_LOGICAL_CHANGE_MASK
	MCUCR_REG &= INT0_SENSE_CLR_MASK;
	MCUCR_REG |= INT0_SENSE_ANY_LOGICAL_CHANGE_MASK;
#elif INT0_SENSE_SELECTOR == INT0_SENSE_FALLING_EDGE_MASK
	MCUCR_REG &= INT0_SENSE_CLR_MASK;
    1f2e:	a5 e5       	ldi	r26, 0x55	; 85
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e5 e5       	ldi	r30, 0x55	; 85
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	8c 7f       	andi	r24, 0xFC	; 252
    1f3a:	8c 93       	st	X, r24
	MCUCR_REG |= INT0_SENSE_FALLING_EDGE_MASK;
    1f3c:	a5 e5       	ldi	r26, 0x55	; 85
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e5       	ldi	r30, 0x55	; 85
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	82 60       	ori	r24, 0x02	; 2
    1f48:	8c 93       	st	X, r24
#elif INT2_SENSE_SELECTOR == INT2_SENSE_RISING_EDGE_MASK
	MCUCSR_REG &= INT2_SENSE_CLR_MASK;
	MCUCSR_REG |= INT2_SENSE_RISING_EDGE_MASK;
#endif
#endif
}
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <Ex_INT0_SetCallBack>:
 *                  MCAL layer by interrupt called callback function.
 * [Args]  : Pointer To Function take void and return void
 * [RUTURN]: Void
 */
void Ex_INT0_SetCallBack(void (*ptr_To_function)(void))
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <Ex_INT0_SetCallBack+0x6>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_INT0 = (volatile void *)ptr_To_function;
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	90 93 6f 01 	sts	0x016F, r25
    1f66:	80 93 6e 01 	sts	0x016E, r24
}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <Ex_INT1_SetCallBack>:

void Ex_INT1_SetCallBack(void (*ptr_To_function)(void))
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <Ex_INT1_SetCallBack+0x6>
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_INT1 = (volatile void *)ptr_To_function;
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	90 93 71 01 	sts	0x0171, r25
    1f8a:	80 93 70 01 	sts	0x0170, r24
}
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <Ex_INT2_SetCallBack>:
void Ex_INT2_SetCallBack(void (*ptr_To_function)(void))
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <Ex_INT2_SetCallBack+0x6>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_INT2 = (volatile void *)ptr_To_function;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	90 93 73 01 	sts	0x0173, r25
    1fae:	80 93 72 01 	sts	0x0172, r24
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <LED_TurnOn>:
/*------------------------------------------------------------------------------
 *                               FUNCTIONS IMPLEMENTATION
 *------------------------------------------------------------------------------*/

EN_LedState_t LED_TurnOn(EN_LedType_t LED_ID)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <LED_TurnOn+0x6>
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_ID)
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	3b 83       	std	Y+3, r19	; 0x03
    1fd2:	2a 83       	std	Y+2, r18	; 0x02
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	91 05       	cpc	r25, r1
    1fdc:	a9 f1       	breq	.+106    	; 0x2048 <LED_TurnOn+0x8c>
    1fde:	2a 81       	ldd	r18, Y+2	; 0x02
    1fe0:	3b 81       	ldd	r19, Y+3	; 0x03
    1fe2:	23 30       	cpi	r18, 0x03	; 3
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	54 f4       	brge	.+20     	; 0x1ffc <LED_TurnOn+0x40>
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	9b 81       	ldd	r25, Y+3	; 0x03
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	b1 f0       	breq	.+44     	; 0x201c <LED_TurnOn+0x60>
    1ff0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ff4:	21 30       	cpi	r18, 0x01	; 1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	e1 f0       	breq	.+56     	; 0x2032 <LED_TurnOn+0x76>
    1ffa:	51 c0       	rjmp	.+162    	; 0x209e <LED_TurnOn+0xe2>
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	91 05       	cpc	r25, r1
    2004:	b9 f1       	breq	.+110    	; 0x2074 <LED_TurnOn+0xb8>
    2006:	2a 81       	ldd	r18, Y+2	; 0x02
    2008:	3b 81       	ldd	r19, Y+3	; 0x03
    200a:	24 30       	cpi	r18, 0x04	; 4
    200c:	31 05       	cpc	r19, r1
    200e:	3c f1       	brlt	.+78     	; 0x205e <LED_TurnOn+0xa2>
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	9b 81       	ldd	r25, Y+3	; 0x03
    2014:	85 30       	cpi	r24, 0x05	; 5
    2016:	91 05       	cpc	r25, r1
    2018:	c1 f1       	breq	.+112    	; 0x208a <LED_TurnOn+0xce>
    201a:	41 c0       	rjmp	.+130    	; 0x209e <LED_TurnOn+0xe2>
	{
	case RED_LED_CAR_ID:
		GPIO_SetPinDir(LED_CAR_PORT_ID, LED_R_CAR_PIN_ID, pin_output);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_R_CAR_PIN_ID, logic_low);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_R_CAR_PIN_ID, logic_high);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	62 e0       	ldi	r22, 0x02	; 2
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2030:	36 c0       	rjmp	.+108    	; 0x209e <LED_TurnOn+0xe2>
#endif
		break;

	case YELLOW_LED_CAR_ID:
		GPIO_SetPinDir(LED_CAR_PORT_ID, LED_Y_CAR_PIN_ID, pin_output);
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_Y_CAR_PIN_ID, logic_low);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_Y_CAR_PIN_ID, logic_high);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2046:	2b c0       	rjmp	.+86     	; 0x209e <LED_TurnOn+0xe2>
#endif
		break;

	case GREEN_LED_CAR_ID:
		GPIO_SetPinDir(LED_CAR_PORT_ID, LED_G_CAR_PIN_ID, pin_output);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_G_CAR_PIN_ID, logic_low);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_G_CAR_PIN_ID, logic_high);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    205c:	20 c0       	rjmp	.+64     	; 0x209e <LED_TurnOn+0xe2>
#endif
		break;

	case RED_LED_PEDESTRIAN_ID:
		GPIO_SetPinDir(LED_PEDESTRIAN_PORT_ID, LED_R_PEDESTRIAN_PIN_ID, pin_output);
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	62 e0       	ldi	r22, 0x02	; 2
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_R_PEDESTRIAN_PIN_ID, logic_low);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_R_PEDESTRIAN_PIN_ID, logic_high);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2072:	15 c0       	rjmp	.+42     	; 0x209e <LED_TurnOn+0xe2>
#endif
		break;

	case YELLOW_LED_PEDESTRIAN_ID:
		GPIO_SetPinDir(LED_PEDESTRIAN_PORT_ID, LED_Y_PEDESTRIAN_PIN_ID, pin_output);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_Y_PEDESTRIAN_PIN_ID, logic_low);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_Y_PEDESTRIAN_PIN_ID, logic_high);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	61 e0       	ldi	r22, 0x01	; 1
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2088:	0a c0       	rjmp	.+20     	; 0x209e <LED_TurnOn+0xe2>
#endif
		break;

	case GREEN_LED_PEDESTRIAN_ID:
		GPIO_SetPinDir(LED_PEDESTRIAN_PORT_ID, LED_G_PEDESTRIAN_PIN_ID, pin_output);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_G_PEDESTRIAN_PIN_ID, logic_low);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_G_PEDESTRIAN_PIN_ID, logic_high);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	41 e0       	ldi	r20, 0x01	; 1
    209a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
#endif
		break;
	}
	return LED_ON;
    209e:	81 e0       	ldi	r24, 0x01	; 1
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LED_TurnOff>:

EN_LedState_t LED_TurnOff(EN_LedType_t LED_ID)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LED_TurnOff+0x6>
    20b2:	0f 92       	push	r0
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_ID)
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	3b 83       	std	Y+3, r19	; 0x03
    20c2:	2a 83       	std	Y+2, r18	; 0x02
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	91 05       	cpc	r25, r1
    20cc:	a9 f1       	breq	.+106    	; 0x2138 <LED_TurnOff+0x8c>
    20ce:	2a 81       	ldd	r18, Y+2	; 0x02
    20d0:	3b 81       	ldd	r19, Y+3	; 0x03
    20d2:	23 30       	cpi	r18, 0x03	; 3
    20d4:	31 05       	cpc	r19, r1
    20d6:	54 f4       	brge	.+20     	; 0x20ec <LED_TurnOff+0x40>
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	b1 f0       	breq	.+44     	; 0x210c <LED_TurnOff+0x60>
    20e0:	2a 81       	ldd	r18, Y+2	; 0x02
    20e2:	3b 81       	ldd	r19, Y+3	; 0x03
    20e4:	21 30       	cpi	r18, 0x01	; 1
    20e6:	31 05       	cpc	r19, r1
    20e8:	e1 f0       	breq	.+56     	; 0x2122 <LED_TurnOff+0x76>
    20ea:	51 c0       	rjmp	.+162    	; 0x218e <LED_TurnOff+0xe2>
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	84 30       	cpi	r24, 0x04	; 4
    20f2:	91 05       	cpc	r25, r1
    20f4:	b9 f1       	breq	.+110    	; 0x2164 <LED_TurnOff+0xb8>
    20f6:	2a 81       	ldd	r18, Y+2	; 0x02
    20f8:	3b 81       	ldd	r19, Y+3	; 0x03
    20fa:	24 30       	cpi	r18, 0x04	; 4
    20fc:	31 05       	cpc	r19, r1
    20fe:	3c f1       	brlt	.+78     	; 0x214e <LED_TurnOff+0xa2>
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	9b 81       	ldd	r25, Y+3	; 0x03
    2104:	85 30       	cpi	r24, 0x05	; 5
    2106:	91 05       	cpc	r25, r1
    2108:	c1 f1       	breq	.+112    	; 0x217a <LED_TurnOff+0xce>
    210a:	41 c0       	rjmp	.+130    	; 0x218e <LED_TurnOff+0xe2>
	{
	case RED_LED_CAR_ID:
		GPIO_SetPinDir(LED_CAR_PORT_ID, LED_R_CAR_PIN_ID, pin_output);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_R_CAR_PIN_ID, logic_high);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_R_CAR_PIN_ID, logic_low);
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2120:	36 c0       	rjmp	.+108    	; 0x218e <LED_TurnOff+0xe2>
#endif
		break;

	case YELLOW_LED_CAR_ID:
		GPIO_SetPinDir(LED_CAR_PORT_ID, LED_Y_CAR_PIN_ID, pin_output);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_Y_CAR_PIN_ID, logic_high);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_Y_CAR_PIN_ID, logic_low);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	61 e0       	ldi	r22, 0x01	; 1
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2136:	2b c0       	rjmp	.+86     	; 0x218e <LED_TurnOff+0xe2>
#endif
		break;

	case GREEN_LED_CAR_ID:
		GPIO_SetPinDir(LED_CAR_PORT_ID, LED_G_CAR_PIN_ID, pin_output);
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_G_CAR_PIN_ID, logic_high);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_CAR_PORT_ID, LED_G_CAR_PIN_ID, logic_low);
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    214c:	20 c0       	rjmp	.+64     	; 0x218e <LED_TurnOff+0xe2>
#endif
		break;

	case RED_LED_PEDESTRIAN_ID:
		GPIO_SetPinDir(LED_PEDESTRIAN_PORT_ID, LED_R_PEDESTRIAN_PIN_ID, pin_output);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_R_PEDESTRIAN_PIN_ID, logic_high);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_R_PEDESTRIAN_PIN_ID, logic_low);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	62 e0       	ldi	r22, 0x02	; 2
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2162:	15 c0       	rjmp	.+42     	; 0x218e <LED_TurnOff+0xe2>
#endif
		break;

	case YELLOW_LED_PEDESTRIAN_ID:
		GPIO_SetPinDir(LED_PEDESTRIAN_PORT_ID, LED_Y_PEDESTRIAN_PIN_ID, pin_output);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_Y_PEDESTRIAN_PIN_ID, logic_high);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_Y_PEDESTRIAN_PIN_ID, logic_low);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
    2178:	0a c0       	rjmp	.+20     	; 0x218e <LED_TurnOff+0xe2>
#endif
		break;

	case GREEN_LED_PEDESTRIAN_ID:
		GPIO_SetPinDir(LED_PEDESTRIAN_PORT_ID, LED_G_PEDESTRIAN_PIN_ID, pin_output);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(LED_CAR_CONFIG == NIGATIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_G_PEDESTRIAN_PIN_ID, logic_high);
#elif(LED_CAR_CONFIG == POSITIVE_LOGIC)
		GPIO_WritePin(LED_PEDESTRIAN_PORT_ID, LED_G_PEDESTRIAN_PIN_ID, logic_low);
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
#endif
		break;
	}
	return LED_OFF;
    218e:	80 e0       	ldi	r24, 0x00	; 0
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <BUTTON_Init>:
/*------------------------------------------------------------------------------
 *                               FUNCTIONS IMPLEMENTATION
 *------------------------------------------------------------------------------*/

void BUTTON_Init(void)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDir(BUTTON_PORT_ID, BUTTON_PIN_ID, pin_input);
    21a4:	83 e0       	ldi	r24, 0x03	; 3
    21a6:	62 e0       	ldi	r22, 0x02	; 2
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GPIO_SetPinDir>
#if(BUTTON1_PULL == EXT_PULL_DOWN)
	GPIO_WritePin(BUTTON_PORT_ID, BUTTON_PIN_ID, logic_low);
#elif(BUTTON1_PULL == EXT_PULL_UP)
	GPIO_WritePin(BUTTON_PORT_ID, BUTTON_PIN_ID, logic_high);
#elif(BUTTON1_PULL == INT_PULL_UP)
	GPIO_WritePin(BUTTON_PORT_ID, BUTTON_PIN_ID, logic_high);
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	62 e0       	ldi	r22, 0x02	; 2
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GPIO_WritePin>
#endif

}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <BUTTON_IsPressed>:

EN_Button_State_t BUTTON_IsPressed(void)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	0f 92       	push	r0
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
	else
	{
		return pressed;
	}
#elif(BUTTON1_PULL == INT_PULL_UP)
	if(GPIO_ReadPin(BUTTON_PORT_ID, BUTTON_PIN_ID))
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	62 e0       	ldi	r22, 0x02	; 2
    21cc:	0e 94 df 0a 	call	0x15be	; 0x15be <GPIO_ReadPin>
    21d0:	88 23       	and	r24, r24
    21d2:	11 f0       	breq	.+4      	; 0x21d8 <BUTTON_IsPressed+0x1a>
	{
		return unpressed;
    21d4:	19 82       	std	Y+1, r1	; 0x01
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <BUTTON_IsPressed+0x1e>
	}
	else
	{
		return pressed;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
	}
#endif
}
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <APP_yellowLed>:
 * 					of Pedestrian and car in traffic.
 * [Args]  : void
 * [Return]: void
 */
static void APP_yellowLed(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	if(buttonFlag == TRUE)
    21ee:	80 91 74 01 	lds	r24, 0x0174
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	31 f5       	brne	.+76     	; 0x2242 <APP_yellowLed+0x5c>
	{
		if(ledPedstrianFlag == FALSE)
    21f6:	80 91 77 01 	lds	r24, 0x0177
    21fa:	88 23       	and	r24, r24
    21fc:	39 f4       	brne	.+14     	; 0x220c <APP_yellowLed+0x26>
		{
			ledCount = 0;
    21fe:	10 92 76 01 	sts	0x0176, r1
			ledPedstrianFlag = TRUE;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	80 93 77 01 	sts	0x0177, r24
			ledPedstrianCount = 0;
    2208:	10 92 78 01 	sts	0x0178, r1
		}

		if(ledPedstrianCount%2 == 0)
    220c:	80 91 78 01 	lds	r24, 0x0178
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	81 70       	andi	r24, 0x01	; 1
    2216:	90 70       	andi	r25, 0x00	; 0
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	51 f4       	brne	.+20     	; 0x2230 <APP_yellowLed+0x4a>
		{
			LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
			LED_TurnOn(YELLOW_LED_PEDESTRIAN_ID);
    2222:	84 e0       	ldi	r24, 0x04	; 4
    2224:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
			LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    2228:	85 e0       	ldi	r24, 0x05	; 5
    222a:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
    222e:	09 c0       	rjmp	.+18     	; 0x2242 <APP_yellowLed+0x5c>
		}
		else
		{
			LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
			LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    2236:	84 e0       	ldi	r24, 0x04	; 4
    2238:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
			LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    223c:	85 e0       	ldi	r24, 0x05	; 5
    223e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		}
	}

	if(ledCount%2 == 0)
    2242:	80 91 76 01 	lds	r24, 0x0176
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	81 70       	andi	r24, 0x01	; 1
    224c:	90 70       	andi	r25, 0x00	; 0
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	51 f4       	brne	.+20     	; 0x2266 <APP_yellowLed+0x80>
	{
		LED_TurnOff(RED_LED_CAR_ID);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOn(YELLOW_LED_CAR_ID);
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
		LED_TurnOff(GREEN_LED_CAR_ID);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
    2264:	09 c0       	rjmp	.+18     	; 0x2278 <APP_yellowLed+0x92>
	}
	else
	{
		LED_TurnOff(RED_LED_CAR_ID);
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(YELLOW_LED_CAR_ID);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(GREEN_LED_CAR_ID);
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	}
}
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <APP_redLed>:
 *              	and handle the case if person press the button.
 * [Args]  : void
 * [Return]: void
 */
static void APP_redLed(void)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
	green = 0;
    2286:	10 92 7c 01 	sts	0x017C, r1
	
	ledFlag = TRUE;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	80 93 75 01 	sts	0x0175, r24
	ledCount = 0;
    2290:	10 92 76 01 	sts	0x0176, r1
    2294:	09 c0       	rjmp	.+18     	; 0x22a8 <APP_redLed+0x2a>

	/* Blinking Yellow Led after 250ms for 5sec */
	while(ledCount <= 19)
	{
		yellowBeforeRed = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	80 93 7a 01 	sts	0x017A, r24

		APP_yellowLed();
    229c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <APP_yellowLed>
		 * break from while loop because the ledCount
		 * update to zero at the second increment in the timer ISR
		 * if don't check and break here the code stuck in the while
		 * because the ledCount don't increment to 20
		 */
		if(ledCount == 19)
    22a0:	80 91 76 01 	lds	r24, 0x0176
    22a4:	83 31       	cpi	r24, 0x13	; 19
    22a6:	21 f0       	breq	.+8      	; 0x22b0 <APP_redLed+0x32>
	
	ledFlag = TRUE;
	ledCount = 0;

	/* Blinking Yellow Led after 250ms for 5sec */
	while(ledCount <= 19)
    22a8:	80 91 76 01 	lds	r24, 0x0176
    22ac:	84 31       	cpi	r24, 0x14	; 20
    22ae:	98 f3       	brcs	.-26     	; 0x2296 <APP_redLed+0x18>
		{
			break;
		}
	}

	ledFlag = TRUE;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 75 01 	sts	0x0175, r24
	ledCount = 0;
    22b6:	10 92 76 01 	sts	0x0176, r1
	ledPedstrianFlag = TRUE;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	80 93 77 01 	sts	0x0177, r24
	ledPedstrianCount = 0;
    22c0:	10 92 78 01 	sts	0x0178, r1
    22c4:	15 c0       	rjmp	.+42     	; 0x22f0 <APP_redLed+0x72>

	while(ledFlag != FALSE)
	{
		red = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 79 01 	sts	0x0179, r24

		LED_TurnOn(RED_LED_CAR_ID);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
		LED_TurnOff(YELLOW_LED_CAR_ID);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(GREEN_LED_CAR_ID);
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>

		LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    22e4:	84 e0       	ldi	r24, 0x04	; 4
    22e6:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOn(GREEN_LED_PEDESTRIAN_ID);
    22ea:	85 e0       	ldi	r24, 0x05	; 5
    22ec:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
	ledFlag = TRUE;
	ledCount = 0;
	ledPedstrianFlag = TRUE;
	ledPedstrianCount = 0;

	while(ledFlag != FALSE)
    22f0:	80 91 75 01 	lds	r24, 0x0175
    22f4:	88 23       	and	r24, r24
    22f6:	39 f7       	brne	.-50     	; 0x22c6 <APP_redLed+0x48>
		LED_TurnOff(RED_LED_PEDESTRIAN_ID);
		LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
		LED_TurnOn(GREEN_LED_PEDESTRIAN_ID);
	}

	LED_TurnOff(RED_LED_CAR_ID);
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(YELLOW_LED_CAR_ID);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(GREEN_LED_CAR_ID);
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>

	LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    2310:	84 e0       	ldi	r24, 0x04	; 4
    2312:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    2316:	85 e0       	ldi	r24, 0x05	; 5
    2318:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>

	yellowBeforeGreen = 0;
    231c:	10 92 7b 01 	sts	0x017B, r1
}
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <APP_greenLed>:
 *	                and handle the case if person press the button.
 * [Args]  : void
 * [Return]: void
 */
static void APP_greenLed(void)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
	uint8 interrupt = 0;
    2330:	19 82       	std	Y+1, r1	; 0x01

	yellowBeforeGreen = 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 7b 01 	sts	0x017B, r24
	yellowBeforeRed = 0;
    2338:	10 92 7a 01 	sts	0x017A, r1
	red = 0;
    233c:	10 92 79 01 	sts	0x0179, r1
	ledFlag = TRUE;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	80 93 75 01 	sts	0x0175, r24
	ledCount = 0;
    2346:	10 92 76 01 	sts	0x0176, r1
    234a:	0c c0       	rjmp	.+24     	; 0x2364 <APP_greenLed+0x3e>

	/* Blinking Yellow Led after 250ms for 5sec */
	while(ledCount <= 19)
	{
		APP_yellowLed();
    234c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <APP_yellowLed>

		if(buttonFlag == TRUE)
    2350:	80 91 74 01 	lds	r24, 0x0174
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	11 f4       	brne	.+4      	; 0x235c <APP_greenLed+0x36>
		{
			interrupt = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	89 83       	std	Y+1, r24	; 0x01
		 * break from while loop because the ledCount
		 * update to zero at the second increment in the timer ISR
		 * if don't check and break here the code stuck in the while
		 * because the ledCount don't increment to 20
		 */
		if(ledCount == 19)
    235c:	80 91 76 01 	lds	r24, 0x0176
    2360:	83 31       	cpi	r24, 0x13	; 19
    2362:	21 f0       	breq	.+8      	; 0x236c <APP_greenLed+0x46>
	red = 0;
	ledFlag = TRUE;
	ledCount = 0;

	/* Blinking Yellow Led after 250ms for 5sec */
	while(ledCount <= 19)
    2364:	80 91 76 01 	lds	r24, 0x0176
    2368:	84 31       	cpi	r24, 0x14	; 20
    236a:	80 f3       	brcs	.-32     	; 0x234c <APP_greenLed+0x26>
		{
			break;
		}
	}

	ledFlag = TRUE;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	80 93 75 01 	sts	0x0175, r24
	ledCount = 0;
    2372:	10 92 76 01 	sts	0x0176, r1
	ledPedstrianFlag = TRUE;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	80 93 77 01 	sts	0x0177, r24
	ledPedstrianCount = 0;
    237c:	10 92 78 01 	sts	0x0178, r1
	green = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	80 93 7c 01 	sts	0x017C, r24
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <APP_greenLed+0x8a>

	while((ledFlag != FALSE) && (buttonFlag == FALSE))
	{
		yellowBeforeGreen = 0;
    2388:	10 92 7b 01 	sts	0x017B, r1

		LED_TurnOff(RED_LED_CAR_ID);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(YELLOW_LED_CAR_ID);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOn(GREEN_LED_CAR_ID);
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>

		LED_TurnOn(RED_LED_PEDESTRIAN_ID);
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
		LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    23a4:	84 e0       	ldi	r24, 0x04	; 4
    23a6:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    23aa:	85 e0       	ldi	r24, 0x05	; 5
    23ac:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	ledCount = 0;
	ledPedstrianFlag = TRUE;
	ledPedstrianCount = 0;
	green = 1;

	while((ledFlag != FALSE) && (buttonFlag == FALSE))
    23b0:	80 91 75 01 	lds	r24, 0x0175
    23b4:	88 23       	and	r24, r24
    23b6:	21 f0       	breq	.+8      	; 0x23c0 <APP_greenLed+0x9a>
    23b8:	80 91 74 01 	lds	r24, 0x0174
    23bc:	88 23       	and	r24, r24
    23be:	21 f3       	breq	.-56     	; 0x2388 <APP_greenLed+0x62>
		LED_TurnOn(RED_LED_PEDESTRIAN_ID);
		LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
		LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
	}

	if(interrupt == 1)
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	81 30       	cpi	r24, 0x01	; 1
    23c4:	19 f4       	brne	.+6      	; 0x23cc <APP_greenLed+0xa6>
	{
		yellowBeforeGreen = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 7b 01 	sts	0x017B, r24
	}

	LED_TurnOff(RED_LED_CAR_ID);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(YELLOW_LED_CAR_ID);
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(GREEN_LED_CAR_ID);
    23d8:	82 e0       	ldi	r24, 0x02	; 2
    23da:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>

	LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    23e4:	84 e0       	ldi	r24, 0x04	; 4
    23e6:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
	LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    23ea:	85 e0       	ldi	r24, 0x05	; 5
    23ec:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
}
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <APP_init>:
 * [Description]  : This function is responsible to initialize the application.
 * [Args]  : void
 * [Return]: void
 */
void APP_init(void)
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
	TIMER0_SetCallBack(APP_timerCarLed);
    2400:	84 e1       	ldi	r24, 0x14	; 20
    2402:	93 e1       	ldi	r25, 0x13	; 19
    2404:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER0_SetCallBack>
	TIMER2_SetCallBack(APP_timerPedestrianLed);
    2408:	8c e2       	ldi	r24, 0x2C	; 44
    240a:	93 e1       	ldi	r25, 0x13	; 19
    240c:	0e 94 a2 08 	call	0x1144	; 0x1144 <TIMER2_SetCallBack>
	TIMER_Init();
    2410:	0e 94 1c 08 	call	0x1038	; 0x1038 <TIMER_Init>

	Ex_INT0_SetCallBack(APP_intCase);
    2414:	8a e0       	ldi	r24, 0x0A	; 10
    2416:	93 e1       	ldi	r25, 0x13	; 19
    2418:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Ex_INT0_SetCallBack>
	Ex_INT_Init();
    241c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Ex_INT_Init>

	GI_Enable();
    2420:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GI_Enable>

	BUTTON_Init();
    2424:	0e 94 ce 10 	call	0x219c	; 0x219c <BUTTON_Init>
}
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <APP_start>:
 * [Description]  : This function is responsible to start the application.
 * [Args]  : void
 * [Return]: void
 */
void APP_start(void)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		if(buttonFlag == FALSE)
    2436:	80 91 74 01 	lds	r24, 0x0174
    243a:	88 23       	and	r24, r24
    243c:	19 f4       	brne	.+6      	; 0x2444 <APP_start+0x16>
		{
			APP_normalMode();
    243e:	0e 94 25 12 	call	0x244a	; 0x244a <APP_normalMode>
    2442:	f9 cf       	rjmp	.-14     	; 0x2436 <APP_start+0x8>
		}
		else
		{
			APP_pedestrianMode();
    2444:	0e 94 35 12 	call	0x246a	; 0x246a <APP_pedestrianMode>
    2448:	f6 cf       	rjmp	.-20     	; 0x2436 <APP_start+0x8>

0000244a <APP_normalMode>:
 *              	like in real life (yellow -> red -> yellow -> green).
 * [Args]  : void
 * [Return]: void
 */
void APP_normalMode(void)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	if(red == 1)
    2452:	80 91 79 01 	lds	r24, 0x0179
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	19 f4       	brne	.+6      	; 0x2460 <APP_normalMode+0x16>
	{
		APP_greenLed();
    245a:	0e 94 93 11 	call	0x2326	; 0x2326 <APP_greenLed>
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <APP_normalMode+0x1a>
	}
	else
	{
		APP_redLed();
    2460:	0e 94 3f 11 	call	0x227e	; 0x227e <APP_redLed>
	}
}
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <APP_pedestrianMode>:
 *              	Press the button.
 * [Args]  : void
 * [Return]: void
 */
void APP_pedestrianMode(void)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
	if(buttonFlag == TRUE)
    2472:	80 91 74 01 	lds	r24, 0x0174
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	31 f4       	brne	.+12     	; 0x2486 <APP_pedestrianMode+0x1c>
	{
		APP_firstCase();
    247a:	0e 94 46 12 	call	0x248c	; 0x248c <APP_firstCase>
		APP_secondCase();
    247e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <APP_secondCase>
		buttonFlag = FALSE;
    2482:	10 92 74 01 	sts	0x0174, r1
	}
}
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <APP_firstCase>:
 *             		or yellow light.
 * [Args]  : void
 * [Return]: void
 */
void APP_firstCase(void)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
	if(green == 1)
    2494:	80 91 7c 01 	lds	r24, 0x017C
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	09 f0       	breq	.+2      	; 0x249e <APP_firstCase+0x12>
    249c:	ab c0       	rjmp	.+342    	; 0x25f4 <APP_firstCase+0x168>
	{
		ledFlag = TRUE;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	80 93 75 01 	sts	0x0175, r24
		ledCount = 0;
    24a4:	10 92 76 01 	sts	0x0176, r1
		ledPedstrianFlag = TRUE;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	80 93 77 01 	sts	0x0177, r24
		ledPedstrianCount = 0;
    24ae:	10 92 78 01 	sts	0x0178, r1

		/* Blinking Yellow Led after 250ms for 5sec */
		if(yellowBeforeGreen != 1)
    24b2:	80 91 7b 01 	lds	r24, 0x017B
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	09 f4       	brne	.+2      	; 0x24bc <APP_firstCase+0x30>
    24ba:	58 c0       	rjmp	.+176    	; 0x256c <APP_firstCase+0xe0>
    24bc:	4d c0       	rjmp	.+154    	; 0x2558 <APP_firstCase+0xcc>
		{
			while((ledCount <= 19) || (ledPedstrianCount <= 19))
			{
				if(buttonFlag == TRUE)
    24be:	80 91 74 01 	lds	r24, 0x0174
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	31 f5       	brne	.+76     	; 0x2512 <APP_firstCase+0x86>
				{
					if(ledPedstrianFlag == FALSE)
    24c6:	80 91 77 01 	lds	r24, 0x0177
    24ca:	88 23       	and	r24, r24
    24cc:	39 f4       	brne	.+14     	; 0x24dc <APP_firstCase+0x50>
					{
						ledCount = 0;
    24ce:	10 92 76 01 	sts	0x0176, r1
						ledPedstrianFlag = TRUE;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 77 01 	sts	0x0177, r24
						ledPedstrianCount = 0;
    24d8:	10 92 78 01 	sts	0x0178, r1
					}

					if(ledPedstrianCount%2 == 0)
    24dc:	80 91 78 01 	lds	r24, 0x0178
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	81 70       	andi	r24, 0x01	; 1
    24e6:	90 70       	andi	r25, 0x00	; 0
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	51 f4       	brne	.+20     	; 0x2500 <APP_firstCase+0x74>
					{
						LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
						LED_TurnOn(YELLOW_LED_PEDESTRIAN_ID);
    24f2:	84 e0       	ldi	r24, 0x04	; 4
    24f4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
						LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    24f8:	85 e0       	ldi	r24, 0x05	; 5
    24fa:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
    24fe:	09 c0       	rjmp	.+18     	; 0x2512 <APP_firstCase+0x86>
					}
					else
					{
						LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
						LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    2506:	84 e0       	ldi	r24, 0x04	; 4
    2508:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
						LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    250c:	85 e0       	ldi	r24, 0x05	; 5
    250e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
					}
				}

				if(ledCount%2 == 0)
    2512:	80 91 76 01 	lds	r24, 0x0176
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	81 70       	andi	r24, 0x01	; 1
    251c:	90 70       	andi	r25, 0x00	; 0
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	51 f4       	brne	.+20     	; 0x2536 <APP_firstCase+0xaa>
				{
					LED_TurnOff(RED_LED_CAR_ID);
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
					LED_TurnOn(YELLOW_LED_CAR_ID);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
					LED_TurnOff(GREEN_LED_CAR_ID);
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
    2534:	09 c0       	rjmp	.+18     	; 0x2548 <APP_firstCase+0xbc>
				}
				else
				{
					LED_TurnOff(RED_LED_CAR_ID);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
					LED_TurnOff(YELLOW_LED_CAR_ID);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
					LED_TurnOff(GREEN_LED_CAR_ID);
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
				 * break from while loop because the ledCount
				 * update to zero at the second increment in the timer ISR
				 * if don't check and break here the code stuck in the while
				 * because the ledCount don't increment to 20
				 */
				if(ledCount == 19 || ledPedstrianCount == 19)
    2548:	80 91 76 01 	lds	r24, 0x0176
    254c:	83 31       	cpi	r24, 0x13	; 19
    254e:	71 f0       	breq	.+28     	; 0x256c <APP_firstCase+0xe0>
    2550:	80 91 78 01 	lds	r24, 0x0178
    2554:	83 31       	cpi	r24, 0x13	; 19
    2556:	51 f0       	breq	.+20     	; 0x256c <APP_firstCase+0xe0>
		ledPedstrianCount = 0;

		/* Blinking Yellow Led after 250ms for 5sec */
		if(yellowBeforeGreen != 1)
		{
			while((ledCount <= 19) || (ledPedstrianCount <= 19))
    2558:	80 91 76 01 	lds	r24, 0x0176
    255c:	84 31       	cpi	r24, 0x14	; 20
    255e:	08 f4       	brcc	.+2      	; 0x2562 <APP_firstCase+0xd6>
    2560:	ae cf       	rjmp	.-164    	; 0x24be <APP_firstCase+0x32>
    2562:	80 91 78 01 	lds	r24, 0x0178
    2566:	84 31       	cpi	r24, 0x14	; 20
    2568:	08 f4       	brcc	.+2      	; 0x256c <APP_firstCase+0xe0>
    256a:	a9 cf       	rjmp	.-174    	; 0x24be <APP_firstCase+0x32>
					break;
				}
			}
		}

		ledFlag = TRUE;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	80 93 75 01 	sts	0x0175, r24
		ledCount = 0;
    2572:	10 92 76 01 	sts	0x0176, r1
		ledPedstrianFlag = TRUE;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 77 01 	sts	0x0177, r24
		ledPedstrianCount = 0;
    257c:	10 92 78 01 	sts	0x0178, r1
    2580:	1d c0       	rjmp	.+58     	; 0x25bc <APP_firstCase+0x130>

		while((ledFlag != FALSE) && (ledPedstrianFlag != FALSE))
		{
			red = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	80 93 79 01 	sts	0x0179, r24

			LED_TurnOn(RED_LED_CAR_ID);
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
			LED_TurnOff(YELLOW_LED_CAR_ID);
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
			LED_TurnOff(GREEN_LED_CAR_ID);
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>

			LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    259a:	83 e0       	ldi	r24, 0x03	; 3
    259c:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
			LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    25a0:	84 e0       	ldi	r24, 0x04	; 4
    25a2:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
			LED_TurnOn(GREEN_LED_PEDESTRIAN_ID);
    25a6:	85 e0       	ldi	r24, 0x05	; 5
    25a8:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LED_TurnOn>
			 * break from while loop because the ledCount
			 * update to zero at the second increment in the timer ISR
			 * if don't check and break here the code stuck in the while
			 * because the ledCount don't increment to 20
			 */
			if(ledCount == 19 || ledPedstrianCount == 19)
    25ac:	80 91 76 01 	lds	r24, 0x0176
    25b0:	83 31       	cpi	r24, 0x13	; 19
    25b2:	61 f0       	breq	.+24     	; 0x25cc <APP_firstCase+0x140>
    25b4:	80 91 78 01 	lds	r24, 0x0178
    25b8:	83 31       	cpi	r24, 0x13	; 19
    25ba:	41 f0       	breq	.+16     	; 0x25cc <APP_firstCase+0x140>
		ledFlag = TRUE;
		ledCount = 0;
		ledPedstrianFlag = TRUE;
		ledPedstrianCount = 0;

		while((ledFlag != FALSE) && (ledPedstrianFlag != FALSE))
    25bc:	80 91 75 01 	lds	r24, 0x0175
    25c0:	88 23       	and	r24, r24
    25c2:	21 f0       	breq	.+8      	; 0x25cc <APP_firstCase+0x140>
    25c4:	80 91 77 01 	lds	r24, 0x0177
    25c8:	88 23       	and	r24, r24
    25ca:	d9 f6       	brne	.-74     	; 0x2582 <APP_firstCase+0xf6>
			{
				break;
			}
		}

		LED_TurnOff(RED_LED_CAR_ID);
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(YELLOW_LED_CAR_ID);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(GREEN_LED_CAR_ID);
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>

		LED_TurnOff(RED_LED_PEDESTRIAN_ID);
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(YELLOW_LED_PEDESTRIAN_ID);
    25e4:	84 e0       	ldi	r24, 0x04	; 4
    25e6:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>
		LED_TurnOff(GREEN_LED_PEDESTRIAN_ID);
    25ea:	85 e0       	ldi	r24, 0x05	; 5
    25ec:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_TurnOff>

		buttonFlag = FALSE;
    25f0:	10 92 74 01 	sts	0x0174, r1
	}
}
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <APP_secondCase>:
 *              	when the person press the Button when traffic of car was in Red light.
 * [Args]  : void
 * [Return]: void
 */
void APP_secondCase(void)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
	if(red == 1)
    2602:	80 91 79 01 	lds	r24, 0x0179
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	11 f4       	brne	.+4      	; 0x260e <APP_secondCase+0x14>
	{
		buttonFlag = FALSE;
    260a:	10 92 74 01 	sts	0x0174, r1
	}
}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <APP_intCase>:
 * 					External Interrupt and call the function in (ISR).
 * [Args]  : void
 * [Return]: void
 */
void APP_intCase(void)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
	buttonFlag = TRUE;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	80 93 74 01 	sts	0x0174, r24
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <APP_timerCarLed>:
 * [Description]  : This function is responsible to handle the time of Car led on by timer and call the function in (ISR).
 * [Args]  : void
 * [Return]: void
 */
void APP_timerCarLed(void)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	if(ledFlag == TRUE)
    2630:	80 91 75 01 	lds	r24, 0x0175
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	69 f4       	brne	.+26     	; 0x2652 <APP_timerCarLed+0x2a>
	{
		ledCount++;
    2638:	80 91 76 01 	lds	r24, 0x0176
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	80 93 76 01 	sts	0x0176, r24
		if(ledCount == 20)
    2642:	80 91 76 01 	lds	r24, 0x0176
    2646:	84 31       	cpi	r24, 0x14	; 20
    2648:	21 f4       	brne	.+8      	; 0x2652 <APP_timerCarLed+0x2a>
		{
			ledFlag = FALSE;
    264a:	10 92 75 01 	sts	0x0175, r1
			ledCount = 0;
    264e:	10 92 76 01 	sts	0x0176, r1
		}
	}
}
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <APP_timerPedestrianLed>:
 * [Description]  : This function is responsible to handle the time of Pedestrian led on by timer and call the function in (ISR).
 * [Args]  : void
 * [Return]: void
 */
void APP_timerPedestrianLed(void)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
	if(ledPedstrianFlag == TRUE)
    2660:	80 91 77 01 	lds	r24, 0x0177
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	69 f4       	brne	.+26     	; 0x2682 <APP_timerPedestrianLed+0x2a>
	{
		ledPedstrianCount++;
    2668:	80 91 78 01 	lds	r24, 0x0178
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	80 93 78 01 	sts	0x0178, r24

		if(ledPedstrianCount == 20)
    2672:	80 91 78 01 	lds	r24, 0x0178
    2676:	84 31       	cpi	r24, 0x14	; 20
    2678:	21 f4       	brne	.+8      	; 0x2682 <APP_timerPedestrianLed+0x2a>
		{
			ledPedstrianFlag = FALSE;
    267a:	10 92 77 01 	sts	0x0177, r1
			ledPedstrianFlag = 0;
    267e:	10 92 77 01 	sts	0x0177, r1
		}
	}

}
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <main>:
/*******************************************************************************
 *                                Main Function
 *******************************************************************************/

int main(void)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    2690:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <APP_init>

	APP_start();
    2694:	0e 94 17 12 	call	0x242e	; 0x242e <APP_start>
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <__prologue_saves__>:
    26a2:	2f 92       	push	r2
    26a4:	3f 92       	push	r3
    26a6:	4f 92       	push	r4
    26a8:	5f 92       	push	r5
    26aa:	6f 92       	push	r6
    26ac:	7f 92       	push	r7
    26ae:	8f 92       	push	r8
    26b0:	9f 92       	push	r9
    26b2:	af 92       	push	r10
    26b4:	bf 92       	push	r11
    26b6:	cf 92       	push	r12
    26b8:	df 92       	push	r13
    26ba:	ef 92       	push	r14
    26bc:	ff 92       	push	r15
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	ca 1b       	sub	r28, r26
    26cc:	db 0b       	sbc	r29, r27
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	09 94       	ijmp

000026da <__epilogue_restores__>:
    26da:	2a 88       	ldd	r2, Y+18	; 0x12
    26dc:	39 88       	ldd	r3, Y+17	; 0x11
    26de:	48 88       	ldd	r4, Y+16	; 0x10
    26e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    26e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    26e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    26e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    26e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    26ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    26ec:	b9 84       	ldd	r11, Y+9	; 0x09
    26ee:	c8 84       	ldd	r12, Y+8	; 0x08
    26f0:	df 80       	ldd	r13, Y+7	; 0x07
    26f2:	ee 80       	ldd	r14, Y+6	; 0x06
    26f4:	fd 80       	ldd	r15, Y+5	; 0x05
    26f6:	0c 81       	ldd	r16, Y+4	; 0x04
    26f8:	1b 81       	ldd	r17, Y+3	; 0x03
    26fa:	aa 81       	ldd	r26, Y+2	; 0x02
    26fc:	b9 81       	ldd	r27, Y+1	; 0x01
    26fe:	ce 0f       	add	r28, r30
    2700:	d1 1d       	adc	r29, r1
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	ed 01       	movw	r28, r26
    270e:	08 95       	ret

00002710 <_exit>:
    2710:	f8 94       	cli

00002712 <__stop_program>:
    2712:	ff cf       	rjmp	.-2      	; 0x2712 <__stop_program>
